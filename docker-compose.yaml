version: '3.4'

services:
  api-gateway:
    container_name: api-gateway
    hostname: api-gateway
    image: juliocesarmidia/api-gateway:latest
    build:
      context: ./api-gateway/
      dockerfile: development.Dockerfile
    ports:
      - 3080:3080
    environment:
      GRPC_CONN_STRING: ${GRPC_CONN_STRING}
      AMQP_CONN_STRING: ${AMQP_CONN_STRING}
      REDIS_CONN_STRING: ${REDIS_CONN_STRING}
    networks:
      - subnet_0
    restart: on-failure
    volumes:
      - ./api-gateway/:/go/src/app:rw

  users-microservice:
    container_name: users-microservice
    hostname: users-microservice
    image: juliocesarmidia/users-microservice:latest
    build:
      context: ./users-microservice
    command: "sh -c 'yarn install && yarn run dev'"
    ports:
      - 50051:50051
    environment:
      NODE_ENV: development
      MONGO_CONN_STRING: ${MONGO_CONN_STRING}
      MONGO_DATABASE: ${MONGO_DATABASE}
      REDIS_CONN_STRING: ${REDIS_CONN_STRING}
    networks:
      - subnet_0
    restart: on-failure
    volumes:
      - ./users-microservice:/usr/src/app:rw
      - users-microservice-node-modules:/usr/src/app/node_modules:rw

  books-microservice:
    container_name: books-microservice
    hostname: books-microservice
    image: juliocesarmidia/books-microservice:latest
    build:
      context: ./books-microservice
    environment:
      AMQP_CONN_STRING: ${AMQP_CONN_STRING}
      POSTGRES_HOST: ${POSTGRES_HOST:-postgres}
      POSTGRES_PORT: ${POSTGRES_PORT:-5432}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASS: ${POSTGRES_PASS:-postgres}
      POSTGRES_DB: ${POSTGRES_DB:-book_db}
    networks:
      - subnet_0
    restart: on-failure

  recommendations-microservice:
    container_name: recommendations-microservice
    hostname: recommendations-microservice
    image: juliocesarmidia/recommendations-microservice:latest
    build:
      context: ./recommendations-microservice
    environment:
      GRPC_CONN_STRING: ${GRPC_CONN_STRING}
      AMQP_CONN_STRING: ${AMQP_CONN_STRING}
      REDIS_CONN_STRING: ${REDIS_CONN_STRING}
    networks:
      - subnet_0
    restart: on-failure
    volumes:
      - ./recommendations-microservice/src:/usr/src/app:rw

  client-microservice:
    container_name: client-microservice
    hostname: client-microservice
    image: juliocesarmidia/client-microservice:latest
    build:
      context: ./client-microservice
      dockerfile: Development.Dockerfile
    restart: on-failure
    networks:
      - subnet_0
    ports:
      - 8080:8080
    environment:
      VUE_APP_API_GATEWAY_CONN_STRING: ${API_GATEWAY_CONN_STRING}
    volumes:
      - ./client-microservice:/app:rw
      - client-microservice-node-modules:/app/node_modules:rw

  postgres:
    container_name: postgres
    hostname: postgres
    image: postgres:9.6-alpine
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASS}
      POSTGRES_DB: ${POSTGRES_DB:-book_db}
    networks:
      - subnet_0
    restart: on-failure
    ports:
      - 5432:5432
    volumes:
      - postgres-data:/var/lib/postgresql/data:rw
      # - ./postgres/init.sql:/docker-entrypoint-initdb.d/init.sql:rw

  mongo:
    container_name: mongo
    hostname: mongo
    image: mongo:5.0
    command: mongod --config /etc/mongo/mongod.conf --storageEngine wiredTiger
    ports:
      - 28017:27017
    environment:
      MONGO_INITDB_DATABASE: ${MONGO_DATABASE}
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
    networks:
      - subnet_0
    restart: on-failure
    volumes:
      - mongo-data:/data/db:rw
      - mongo-home:/home/mongodb:rw
      - ./mongo/mongod.conf:/etc/mongo/mongod.conf:ro
      - ./mongo/init.sh:/docker-entrypoint-initdb.d/init.sh:ro
      - ./mongo/init.js:/init.js:ro

  rabbitmq:
    container_name: rabbitmq
    hostname: rabbitmq
    image: juliocesarmidia/rabbitmq:latest
    build:
      context: ./rabbitmq
    ports:
      - 5872:5672
      - 15872:15672
    environment:
      RABBITMQ_USERNAME: ${RABBITMQ_USERNAME}
      RABBITMQ_PASSWORD: ${RABBITMQ_PASSWORD}
    networks:
      - subnet_0
    restart: on-failure

  redis:
    container_name: redis
    hostname: redis
    image: redis:5.0
    ports:
      - 6379:6379
    networks:
      - subnet_0
    restart: on-failure

networks:
  subnet_0:
    driver_opts:
      com.docker.network.enable_ipv6: "false"
    ipam:
      driver: default
      config:
      - subnet: 172.100.10.0/24

volumes:
  users-microservice-node-modules: {}
  client-microservice-node-modules: {}
  postgres-data: {}
  mongo-data: {}
  mongo-home: {}

secrets: {}
