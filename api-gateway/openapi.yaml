openapi: 3.0.1
info:
  title: book-recommendations
  description: book-recommendations
  version: v1
  contact:
    name: Julio Scheidt
    email: julio@blackdevs.com.br
servers:
  - url: http://book-recommendations.{NAMESPACE}.svc.cluster.local:3080/

tags:
  - name: HealthChechServices
    description: Services related to Health Chech resources
  - name: AuthServices
    description: Services related to Auth resources
  - name: UserServices
    description: Services related to User resources
  - name: UserRateServices
    description: Services related to User Rate resources
  - name: BookServices
    description: Services related to Book resources
  - name: RecommendationServices
    description: Services related to Recommendation resources

paths:
  /api/healthcheck:
    get:
      tags:
        - HealthChechServices
      summary: get healthcheck
      operationId: getHealthcheck
      responses:
        '200':
          description: 'OK'
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: 'alive'
        '500':
          description: 'Internal Server Error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultResponseServerError'

  /api/auth/signup:
    post:
      tags:
        - AuthServices
      summary: user signup
      operationId: userSignUp
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/UserBody'
                - type: object
                  properties:
                    password:
                      type: string
      responses:
        '201':
          description: 'Created'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserSignUpSuccessResponse'
        '400':
          description: 'Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultResponseBadRequest'
        '500':
          description: 'Internal Server Error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultResponseServerError'

  /api/auth/signin:
    post:
      tags:
        - AuthServices
      summary: user signin
      operationId: userSignIn
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
      responses:
        '200':
          description: 'OK'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserSignInSuccessResponse'
        '400':
          description: 'Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultResponseBadRequest'
        '500':
          description: 'Internal Server Error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultResponseServerError'

  /api/user/me:
    get:
      tags:
        - UserServices
      summary: get current user info
      operationId: getCurrentUserInfo
      security:
        - BearerAuth: []
      responses:
        '200':
          description: 'OK'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetUserSuccessResponse'
        '401':
          description: 'Unauthorized'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultResponseUnauthorized'
        '500':
          description: 'Internal Server Error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultResponseServerError'

  /api/user:
    post:
      tags:
        - UserServices
      summary: create user
      operationId: createUser
      security:
        - BearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/UserBody'
                - type: object
                  properties:
                    password:
                      type: string
      responses:
        '201':
          description: 'Created'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateUserSuccessResponse'
        '400':
          description: 'Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultResponseBadRequest'
        '401':
          description: 'Unauthorized'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultResponseUnauthorized'
        '500':
          description: 'Internal Server Error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultResponseServerError'

    get:
      tags:
        - UserServices
      summary: list user
      operationId: listUser
      security:
        - BearerAuth: []
      parameters:
        - name: page
          in: query
          description: Page to search
          required: true
          schema:
            type: integer
            example: 0
            minimum: 0
        - name: size
          in: query
          description: Size of page
          required: true
          schema:
            type: integer
            example: 50
            maximum: 100
      responses:
        '200':
          description: 'OK'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListUserSuccessResponse'
        '401':
          description: 'Unauthorized'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultResponseUnauthorized'
        '500':
          description: 'Internal Server Error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultResponseServerError'

  /api/user/{uuid}:
    get:
      tags:
        - UserServices
      summary: get user
      operationId: getUser
      security:
        - BearerAuth: []
      parameters:
      - name: uuid
        in: path
        description: Uuid for user
        required: true
        schema:
          $ref: '#/components/schemas/Uuid'
      responses:
        '200':
          description: 'OK'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetUserSuccessResponse'
        '400':
          description: 'Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultResponseBadRequest'
        '401':
          description: 'Unauthorized'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultResponseUnauthorized'
        '404':
          description: 'Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultResponseNotFound'
        '500':
          description: 'Internal Server Error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultResponseServerError'

    put:
      tags:
        - UserServices
      summary: update user
      operationId: updateUser
      security:
        - BearerAuth: []
      parameters:
      - name: uuid
        in: path
        description: Uuid for user
        required: true
        schema:
          $ref: '#/components/schemas/Uuid'
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/UserBody'
                - type: object
                  properties:
                    password:
                      type: string
      responses:
        '202':
          description: 'Accepted'
        '400':
          description: 'Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultResponseBadRequest'
        '401':
          description: 'Unauthorized'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultResponseUnauthorized'
        '404':
          description: 'Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultResponseNotFound'
        '500':
          description: 'Internal Server Error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultResponseServerError'

    delete:
      tags:
        - UserServices
      summary: delete user
      operationId: deleteUser
      security:
        - BearerAuth: []
      parameters:
      - name: uuid
        in: path
        description: Uuid for user
        required: true
        schema:
          $ref: '#/components/schemas/Uuid'
      responses:
        '204':
          description: 'No Content'
        '400':
          description: 'Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultResponseBadRequest'
        '401':
          description: 'Unauthorized'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultResponseUnauthorized'
        '404':
          description: 'Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultResponseNotFound'
        '500':
          description: 'Internal Server Error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultResponseServerError'

  /api/user/rating:
    post:
      tags:
        - UserRateServices
      summary: upsert user rate
      operationId: upsertUserRate
      security:
        - BearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/UserRateBody'
                - type: object
                  properties:
                    book_uuid:
                      $ref: '#/components/schemas/Uuid'
                    rate:
                      type: number
      responses:
        '201':
          description: 'Created'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpsertUserRateSuccessResponse'
        '400':
          description: 'Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultResponseBadRequest'
        '401':
          description: 'Unauthorized'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultResponseUnauthorized'
        '404':
          description: 'Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultResponseNotFound'
        '500':
          description: 'Internal Server Error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultResponseServerError'

    get:
      tags:
        - UserRateServices
      summary: list user rate
      operationId: listUserRate
      security:
        - BearerAuth: []
      parameters:
        - name: page
          in: query
          description: Page to search
          required: true
          schema:
            type: integer
            example: 0
            minimum: 0
        - name: size
          in: query
          description: Size of page
          required: true
          schema:
            type: integer
            example: 50
            maximum: 100
      responses:
        '200':
          description: 'OK'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListUserRateSuccessResponse'
        '401':
          description: 'Unauthorized'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultResponseUnauthorized'
        '500':
          description: 'Internal Server Error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultResponseServerError'

  /api/user/rating/{user_uuid}:
    get:
      tags:
        - UserRateServices
      summary: get user rate
      operationId: getUserRate
      security:
        - BearerAuth: []
      parameters:
      - name: user_uuid
        in: path
        description: Uuid for user
        required: true
        schema:
          $ref: '#/components/schemas/Uuid'
      responses:
        '200':
          description: 'OK'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetUserRateSuccessResponse'
        '400':
          description: 'Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultResponseBadRequest'
        '401':
          description: 'Unauthorized'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultResponseUnauthorized'
        '404':
          description: 'Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultResponseNotFound'
        '500':
          description: 'Internal Server Error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultResponseServerError'

    delete:
      tags:
        - UserRateServices
      summary: delete user rate
      operationId: deleteUserRate
      security:
        - BearerAuth: []
      parameters:
      - name: user_uuid
        in: path
        description: Uuid for user
        required: true
        schema:
          $ref: '#/components/schemas/Uuid'
      responses:
        '204':
          description: 'No Content'
        '400':
          description: 'Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultResponseBadRequest'
        '401':
          description: 'Unauthorized'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultResponseUnauthorized'
        '404':
          description: 'Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultResponseNotFound'
        '500':
          description: 'Internal Server Error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultResponseServerError'

  /api/book:
    post:
      tags:
        - BookServices
      summary: create book
      operationId: createBook
      security:
        - BearerAuth: []
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                title:
                  type: string
                author:
                  type: string
                genre:
                  type: string
                image:
                  type: string
                  format: binary
      responses:
        '201':
          description: 'Created'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateBookSuccessResponse'
        '400':
          description: 'Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultResponseBadRequest'
        '401':
          description: 'Unauthorized'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultResponseUnauthorized'
        '500':
          description: 'Internal Server Error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultResponseServerError'

    get:
      tags:
        - BookServices
      summary: list book
      operationId: listBook
      security:
        - BearerAuth: []
      parameters:
        - name: page
          in: query
          description: Page to search
          required: true
          schema:
            type: integer
            example: 0
            minimum: 0
        - name: size
          in: query
          description: Size of page
          required: true
          schema:
            type: integer
            example: 50
            maximum: 100
      responses:
        '200':
          description: 'OK'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListBookSuccessResponse'
        '401':
          description: 'Unauthorized'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultResponseUnauthorized'
        '500':
          description: 'Internal Server Error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultResponseServerError'

  /api/book/{uuid}:
    get:
      tags:
        - BookServices
      summary: get book
      operationId: getBook
      security:
        - BearerAuth: []
      parameters:
      - name: uuid
        in: path
        description: Uuid for book
        required: true
        schema:
          $ref: '#/components/schemas/Uuid'
      responses:
        '200':
          description: 'OK'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetBookSuccessResponse'
        '400':
          description: 'Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultResponseBadRequest'
        '401':
          description: 'Unauthorized'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultResponseUnauthorized'
        '404':
          description: 'Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultResponseNotFound'
        '500':
          description: 'Internal Server Error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultResponseServerError'

    put:
      tags:
        - BookServices
      summary: update book
      operationId: updateBook
      security:
        - BearerAuth: []
      parameters:
      - name: uuid
        in: path
        description: Uuid for book
        required: true
        schema:
          $ref: '#/components/schemas/Uuid'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                author:
                  type: string
                genre:
                  type: string
      responses:
        '202':
          description: 'Accepted'
        '400':
          description: 'Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultResponseBadRequest'
        '401':
          description: 'Unauthorized'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultResponseUnauthorized'
        '404':
          description: 'Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultResponseNotFound'
        '500':
          description: 'Internal Server Error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultResponseServerError'

    delete:
      tags:
        - BookServices
      summary: delete book
      operationId: deleteBook
      security:
        - BearerAuth: []
      parameters:
      - name: uuid
        in: path
        description: Uuid for book
        required: true
        schema:
          $ref: '#/components/schemas/Uuid'
      responses:
        '204':
          description: 'No Content'
        '400':
          description: 'Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultResponseBadRequest'
        '401':
          description: 'Unauthorized'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultResponseUnauthorized'
        '404':
          description: 'Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultResponseNotFound'
        '500':
          description: 'Internal Server Error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultResponseServerError'

  /api/book/{uuid}/image:
    put:
      tags:
        - BookServices
      summary: update book with image
      operationId: updateBookWithImage
      security:
        - BearerAuth: []
      parameters:
      - name: uuid
        in: path
        description: Uuid for book
        required: true
        schema:
          $ref: '#/components/schemas/Uuid'
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                title:
                  type: string
                author:
                  type: string
                genre:
                  type: string
                image:
                  type: string
                  format: binary
      responses:
        '202':
          description: 'Accepted'
        '400':
          description: 'Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultResponseBadRequest'
        '401':
          description: 'Unauthorized'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultResponseUnauthorized'
        '404':
          description: 'Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultResponseNotFound'
        '500':
          description: 'Internal Server Error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultResponseServerError'

  /api/book/{uuid}/image/url:
    get:
      tags:
        - BookServices
      summary: get book image url
      operationId: getBookImageUrl
      security:
        - BearerAuth: []
      parameters:
      - name: uuid
        in: path
        description: Uuid for book
        required: true
        schema:
          $ref: '#/components/schemas/Uuid'
      responses:
        '200':
          description: 'OK'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetBookImageUrlSuccessResponse'
        '400':
          description: 'Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultResponseBadRequest'
        '401':
          description: 'Unauthorized'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultResponseUnauthorized'
        '404':
          description: 'Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultResponseNotFound'
        '500':
          description: 'Internal Server Error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultResponseServerError'

  /api/recommendation/user/{uuid}:
    get:
      tags:
        - RecommendationServices
      summary: get recommendation
      operationId: getRecommendation
      security:
        - BearerAuth: []
      parameters:
      - name: uuid
        in: path
        description: Uuid for recommendation
        required: true
        schema:
          $ref: '#/components/schemas/Uuid'
      responses:
        '200':
          description: 'OK'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetRecommendationSuccessResponse'
        '400':
          description: 'Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultResponseBadRequest'
        '401':
          description: 'Unauthorized'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultResponseUnauthorized'
        '404':
          description: 'Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultResponseNotFound'
        '500':
          description: 'Internal Server Error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultResponseServerError'

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer

  schemas:
    DefaultResponseBadRequest:
      type: object
      properties:
        message:
          type: string
          description: 'Status code'
          example: 'Bad Request'

    DefaultResponseUnauthorized:
      type: object
      properties:
        message:
          type: string
          description: 'Status code'
          example: 'Unauthorized'

    DefaultResponseNotFound:
      type: object
      properties:
        message:
          type: string
          description: 'Status code'
          example: 'Not Found'

    DefaultResponseServerError:
      type: object
      properties:
        message:
          type: string
          description: 'Status code'
          example: 'Internal Server Error'

    Uuid:
      type: string
      example: '17f182b0dfc002737d507f74'

    ImageUrl:
      type: string
      example: 'https://bucket.s3.sa-east-1.amazonaws.com/book-recommendations-files/clean-arch-cover-1653858052.jpg?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASVA4CJNBNXJ76P7T6AS%3F20220528%2Fsa-east-1%2Fs3%2Faws4_request&X-Amz-Date=20220529T210128S&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=2b0f4e9c6e2f53982f59bfce1bb9347710a6d06da6333bdd1a6aa548d4f8c622'

    CreatedAt:
      type: string
      format: date-time
      example: '2021-01-01T12:00:00.000Z'

    UpdatedAt:
      type: string
      format: date-time
      example: '2021-01-01T12:00:00.000Z'

    UserBody:
      type: object
      properties:
        name:
          type: string
        surname:
          type: string
        email:
          type: string
        phone:
          type: string
          format: phone
          example: '1199999999'

    UserFull:
      allOf:
        - type: object
          properties:
            uuid:
              $ref: '#/components/schemas/Uuid'
            created_at:
              $ref: '#/components/schemas/CreatedAt'
            updated_at:
              $ref: '#/components/schemas/UpdatedAt'
        - $ref: '#/components/schemas/UserBody'

    UserRateBody:
      allOf:
        - type: object
          properties:
            user_uuid:
              $ref: '#/components/schemas/Uuid'

    UserRateFull:
      allOf:
        - $ref: '#/components/schemas/UserRateBody'
        - type: object
          properties:
            rates:
              type: array
              items:
                type: object
                properties:
                  book_uuid:
                    $ref: '#/components/schemas/Uuid'
                  rate:
                    type: number
            created_at:
              $ref: '#/components/schemas/CreatedAt'
            updated_at:
              $ref: '#/components/schemas/UpdatedAt'

    BookBody:
      type: object
      properties:
        title:
          type: string
        author:
          type: string
        genre:
          type: string
        image:
          type: string

    BookFull:
      allOf:
        - type: object
          properties:
            uuid:
              $ref: '#/components/schemas/Uuid'
            created_at:
              $ref: '#/components/schemas/CreatedAt'
            updated_at:
              $ref: '#/components/schemas/UpdatedAt'
        - $ref: '#/components/schemas/BookBody'

    RecommendationBody:
      type: object
      properties:
        user_uuid:
          $ref: '#/components/schemas/Uuid'
        recommendations:
          type: array
          items:
            type: object
            properties:
              book_uuid:
                $ref: '#/components/schemas/Uuid'
              rate:
                type: number

    RecommendationFull:
      $ref: '#/components/schemas/RecommendationBody'

    BearerToken:
      type: string
      example: >-
        eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1dWlkIjoiMTdmOWFiMzRmMDUwZmM0MTk5Y2Y5MThiIiwibmFtZSI6Imp1bGlvIiwic3VybmFtZSI6ImNlc2FyIiwiZW1haWwiOiJqdWxpb0BtYWlsLmNvbSIsInBob25lIjoiKzU1NDE5OTg4Nzc2NiIsImlhdCI6MTY0NzU2NzkxNiwiZXhwIjoxNjQ3NTcxNTE2LCJhdWQiOiJ1cm46Ym9vay1yZWNvbW1lbmRhdGlvbnM6YXBpLWdhdGV3YXkiLCJpc3MiOiJ1cm46Ym9vay1yZWNvbW1lbmRhdGlvbnM6dXNlcnMtbWljcm9zZXJ2aWNlIn0.Anff7tEPzaqIlpPFgqNNoxKg0CapOxLl6EaI5I3EmR48VyMJYsm3MWhRpXoTpoGoH_cUXu9AVXAY39kueVZP2-eJmq6sHh8awrjlEOh14mx9og_inaOZps8g-tUE0g93LAbPMAnxeMU584Gorg3xaJpe-RsJn5QttWNX2WgqmFJKKZ4v38Bb5w75SzLFQ0G5FiobwNHJmmqV5z4HFqkRyU-6D65sn_LwrS_TgQ8cw73bpHyfQfoDCkngNjGEpzvi6CEvWNkiPLAgHJiwrnJHNVIF1zt0Ltj3DxgRh_R4TEpLpmUTKxBpTjGbSzbuXSGYqdLEy0EFd9CinOyE04h_0Q

    UserSignUpSuccessResponse:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/BearerToken'

    UserSignInSuccessResponse:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/BearerToken'

    CreateUserSuccessResponse:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/Uuid'

    GetUserSuccessResponse:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/UserFull'

    ListUserSuccessResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/UserFull'

    UpsertUserRateSuccessResponse:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/Uuid'

    GetUserRateSuccessResponse:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/UserRateFull'

    ListUserRateSuccessResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/UserRateFull'

    CreateBookSuccessResponse:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/Uuid'

    GetBookSuccessResponse:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/BookFull'

    GetBookImageUrlSuccessResponse:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/ImageUrl'

    ListBookSuccessResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/BookFull'

    GetRecommendationSuccessResponse:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/RecommendationFull'
